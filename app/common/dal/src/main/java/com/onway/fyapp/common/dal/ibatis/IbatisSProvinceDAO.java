/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.fyapp.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.fyapp.common.dal.daointerface.SProvinceDAO;

import com.onway.fyapp.common.dal.dataobject.SProvinceDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import java.util.HashMap;

import java.util.Map;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.fyapp.common.dal.daointerface.SProvinceDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/s_provinces.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisSProvinceDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisSProvinceDAO extends SqlMapClientDaoSupport implements SProvinceDAO {
	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param cityName
	 *	@param isUse
	 *	@param depth
	 *	@param offset
	 *	@param limit
	 *	@return List<SProvinceDO>
	 *	@throws DataAccessException
	 */	 
    public  List<SProvinceDO>   queryAll(String cityName, String isUse, String depth, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("cityName", cityName);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from s_provinces</tt>
	 *
	 *	@param cityName
	 *	@param isUse
	 *	@param depth
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryAllCount(String cityName, String isUse, String depth) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("cityName", cityName);
        param.put("isUse", isUse);
        param.put("depth", depth);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-S-PROVINCE-QUERY-ALL-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>s_provinces</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update s_provinces set isUse=? where (id = ?)</tt>
	 *
	 *	@param SProvince
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateCanUse(SProvinceDO SProvince) throws DataAccessException {
    	if (SProvince == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-S-PROVINCE-UPDATE-CAN-USE", SProvince);
    }

	/**
	 *  Update DB table <tt>s_provinces</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update s_provinces set postage=?, free_postage=? where (id = ?)</tt>
	 *
	 *	@param SProvince
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatePostage(SProvinceDO SProvince) throws DataAccessException {
    	if (SProvince == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-S-PROVINCE-UPDATE-POSTAGE", SProvince);
    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param cityName
	 *	@param isUse
	 *	@param depth
	 *	@param hasChooseForDiscount
	 *	@param linkProvinces
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   queryAllProDiscount(String cityName, String isUse, String depth, String hasChooseForDiscount, List linkProvinces, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("cityName", cityName);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProvinces", linkProvinces);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-PRO-DISCOUNT", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from s_provinces</tt>
	 *
	 *	@param cityName
	 *	@param isUse
	 *	@param depth
	 *	@param hasChooseForDiscount
	 *	@param linkProvinces
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryAllProDiscountCount(String cityName, String isUse, String depth, String hasChooseForDiscount, List linkProvinces) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("cityName", cityName);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProvinces", linkProvinces);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-S-PROVINCE-QUERY-ALL-PRO-DISCOUNT-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param parentId
	 *	@param isUse
	 *	@param depth
	 *	@param hasChooseForDiscount
	 *	@param linkProvinces
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   queryAllCityDiscount(String parentId, String isUse, String depth, String hasChooseForDiscount, List linkProvinces, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("parentId", parentId);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProvinces", linkProvinces);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-CITY-DISCOUNT", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from s_provinces</tt>
	 *
	 *	@param parentId
	 *	@param isUse
	 *	@param depth
	 *	@param hasChooseForDiscount
	 *	@param linkProvinces
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryAllCityDiscountCount(String parentId, String isUse, String depth, String hasChooseForDiscount, List linkProvinces) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("parentId", parentId);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProvinces", linkProvinces);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-S-PROVINCE-QUERY-ALL-CITY-DISCOUNT-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param isUse
	 *	@param linkCitys
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 
    public  List<String>   queryAllProDisByCitys(String isUse, List linkCitys) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("isUse", isUse);
        param.put("linkCitys", linkCitys);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-PRO-DIS-BY-CITYS", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param provinceName
	 *	@param isUse
	 *	@param depth
	 *	@return SProvinceDO
	 *	@throws DataAccessException
	 */	 
    public  SProvinceDO   queryByProvinceName(String provinceName, String isUse, String depth) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("provinceName", provinceName);
        param.put("isUse", isUse);
        param.put("depth", depth);

	        return (SProvinceDO) getSqlMapClientTemplate().queryForObject("MS-S-PROVINCE-QUERY-BY-PROVINCE-NAME", param);
		
    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param parentId
	 *	@param isUse
	 *	@param offset
	 *	@param limit
	 *	@return List<SProvinceDO>
	 *	@throws DataAccessException
	 */	 
    public  List<SProvinceDO>   queryAllCityByParentId(String parentId, String isUse, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("parentId", parentId);
        param.put("isUse", isUse);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-CITY-BY-PARENT-ID", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param id
	 *	@return SProvinceDO
	 *	@throws DataAccessException
	 */	 
    public  SProvinceDO   queryCityById(String id) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("id", id);

	        return (SProvinceDO) getSqlMapClientTemplate().queryForObject("MS-S-PROVINCE-QUERY-CITY-BY-ID", param);
		
    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param parentId
	 *	@param isUse
	 *	@param offset
	 *	@param limit
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 
    public  List<String>   queryAllCityNameByParentId(String parentId, String isUse, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("parentId", parentId);
        param.put("isUse", isUse);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-CITY-NAME-BY-PARENT-ID", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from s_provinces</tt>
	 *
	 *	@param parentIds
	 *	@param isUse
	 *	@param depth
	 *	@param offset
	 *	@param limit
	 *	@return List<SProvinceDO>
	 *	@throws DataAccessException
	 */	 
    public  List<SProvinceDO>   queryAllCityByParentIdS(List parentIds, String isUse, String depth, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("parentIds", parentIds);
        param.put("isUse", isUse);
        param.put("depth", depth);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-ALL-CITY-BY-PARENT-ID-S", param);

    }

	/**
	 *  Query DB table <tt>s_provinces</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select shortName from s_provinces</tt>
	 *
	 *	@param ids
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 
    public  List<String>   queryCityByIdS(List ids) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("ids", ids);

        return getSqlMapClientTemplate().queryForList("MS-S-PROVINCE-QUERY-CITY-BY-ID-S", param);

    }

}