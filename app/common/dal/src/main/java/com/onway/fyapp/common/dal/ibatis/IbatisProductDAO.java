/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.fyapp.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.fyapp.common.dal.daointerface.ProductDAO;

import com.onway.fyapp.common.dal.dataobject.ProductDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.HashMap;

import java.util.Map;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.fyapp.common.dal.daointerface.ProductDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/hqyt_product.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisProductDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisProductDAO extends SqlMapClientDaoSupport implements ProductDAO {
	/**
	 *  Insert one <tt>ProductDO</tt> object to DB table <tt>hqyt_product</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into hqyt_product(PRODUCT_ID,PRODUCT_NAME,PRO_NAME,PRO_ZJM,SHOW_OLD,PRODUCT_AREA,SALES,MOUNTH_SALES,BRAND,MANUFACTURER,LICENSE_NO,TYPE,FATHER_CATE,CHILD_CATE,FATHER_EFECT_CATE,CHILD_EFECT_CATE,DEL_FLG,PRO_TYPE,CAN_BUY,ON_SALE,ERP_NO,IS_NEW,PICK_TYPE,USER_LEVEL,MAX_DISCOUNT,UNIT,PRODUCT_AREA_SOURCE,ATTEN_MEMO,KEEP_WAY,KEEP_DATE,SPECIFICATION,RANK_NUM,BUSINESS_CATEGORY,FREE_LUAGGER,CREATER,GMT_CREATE,GMT_MODIFIED) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param product
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   insert(ProductDO product) throws DataAccessException {
    	if (product == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRODUCT-INSERT", product);

        return product.getId();
    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set PRODUCT_NAME=?, PRO_NAME=?, PRO_ZJM=?, SHOW_OLD=?, PRODUCT_AREA=?, SALES=?, MOUNTH_SALES=?, BRAND=?, MANUFACTURER=?, LICENSE_NO=?, TYPE=?, FATHER_CATE=?, CHILD_CATE=?, FATHER_EFECT_CATE=?, CHILD_EFECT_CATE=?, DEL_FLG=?, PRO_TYPE=?, CAN_BUY=?, ERP_NO=?, ON_SALE=?, IS_NEW=?, PICK_TYPE=?, USER_LEVEL=?, MAX_DISCOUNT=?, UNIT=?, PRODUCT_AREA_SOURCE=?, ATTEN_MEMO=?, KEEP_WAY=?, KEEP_DATE=?, SPECIFICATION=?, RANK_NUM=?, BUSINESS_CATEGORY=?, FREE_LUAGGER=?, MODIFIER=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (PRODUCT_ID = ?)</tt>
	 *
	 *	@param product
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateByProdId(ProductDO product) throws DataAccessException {
    	if (product == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-BY-PROD-ID", product);
    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product where ((1 = 1) AND (PRODUCT_ID = ?))</tt>
	 *
	 *	@param productId
	 *	@return ProductDO
	 *	@throws DataAccessException
	 */	 
    public  ProductDO   selectByProdId(String productId) throws DataAccessException {

 
	        return (ProductDO) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-BY-PROD-ID", productId);
		
    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product</tt>
	 *
	 *	@param productId
	 *	@param proType
	 *	@param teamId
	 *	@param teamName
	 *	@param productName
	 *	@param onSale
	 *	@param canBuy
	 *	@param licenseNo
	 *	@param isDelete
	 *	@param erpNo
	 *	@param hasChooseForDiscount
	 *	@param linkProIds
	 *	@param freeLuggage
	 *	@param barcode
	 *	@param hasStockPrice
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   queryGoods(String productId, String proType, String teamId, String teamName, String productName, String onSale, String canBuy, String licenseNo, String isDelete, String erpNo, String hasChooseForDiscount, List linkProIds, String freeLuggage, String barcode, String hasStockPrice, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productId", productId);
        param.put("proType", proType);
        param.put("teamId", teamId);
        param.put("teamName", teamName);
        param.put("productName", productName);
        param.put("onSale", onSale);
        param.put("canBuy", canBuy);
        param.put("licenseNo", licenseNo);
        param.put("isDelete", isDelete);
        param.put("erpNo", erpNo);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProIds", linkProIds);
        param.put("freeLuggage", freeLuggage);
        param.put("barcode", barcode);
        param.put("hasStockPrice", hasStockPrice);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-QUERY-GOODS", param);

    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product</tt>
	 *
	 *	@param productId
	 *	@param proType
	 *	@param productName
	 *	@param onSale
	 *	@param canBuy
	 *	@param licenseNo
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   selectProductPage(String productId, String proType, String productName, String onSale, String canBuy, String licenseNo, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productId", productId);
        param.put("proType", proType);
        param.put("productName", productName);
        param.put("onSale", onSale);
        param.put("canBuy", canBuy);
        param.put("licenseNo", licenseNo);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-SELECT-PRODUCT-PAGE", param);

    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from hqyt_product</tt>
	 *
	 *	@param productId
	 *	@param proType
	 *	@param teamId
	 *	@param teamName
	 *	@param productName
	 *	@param onSale
	 *	@param canBuy
	 *	@param licenseNo
	 *	@param isDelete
	 *	@param erpNo
	 *	@param hasChooseForDiscount
	 *	@param linkProIds
	 *	@param freeLuggage
	 *	@param barcode
	 *	@param hasStockPrice
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   selectProductPageCount(String productId, String proType, String teamId, String teamName, String productName, String onSale, String canBuy, String licenseNo, String isDelete, String erpNo, String hasChooseForDiscount, List linkProIds, String freeLuggage, String barcode, String hasStockPrice) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productId", productId);
        param.put("proType", proType);
        param.put("teamId", teamId);
        param.put("teamName", teamName);
        param.put("productName", productName);
        param.put("onSale", onSale);
        param.put("canBuy", canBuy);
        param.put("licenseNo", licenseNo);
        param.put("isDelete", isDelete);
        param.put("erpNo", erpNo);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProIds", linkProIds);
        param.put("freeLuggage", freeLuggage);
        param.put("barcode", barcode);
        param.put("hasStockPrice", hasStockPrice);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-SELECT-PRODUCT-PAGE-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set MOUNTH_SALES=0, GMT_MODIFIED=CURRENT_TIMESTAMP</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   cleanProMounthSell() throws DataAccessException {

        return getSqlMapClientTemplate().update("MS-PRODUCT-CLEAN-PRO-MOUNTH-SELL", null);
    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set ON_SALE="1", MODIFIER=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (PRODUCT_ID = ?)</tt>
	 *
	 *	@param modifier
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateOnSale(String modifier, String productId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("modifier", modifier);
        param.put("productId", productId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-ON-SALE", param);
    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set DEL_FLG="1", MODIFIER=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param modifier
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateDelFlg(String modifier, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("modifier", modifier);
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-DEL-FLG", param);
    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set ON_SALE=?, MODIFIER=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param onSale
	 *	@param modifier
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   autoOnSale(String onSale, String modifier, int id) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("onSale", onSale);
        param.put("modifier", modifier);
        param.put("id", new Integer(id));

        return getSqlMapClientTemplate().update("MS-PRODUCT-AUTO-ON-SALE", param);
    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product where (ID = ?)</tt>
	 *
	 *	@param id
	 *	@return ProductDO
	 *	@throws DataAccessException
	 */	 
    public  ProductDO   queryGoodsById(int id) throws DataAccessException {

        Integer param = new Integer(id);

	        return (ProductDO) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-QUERY-GOODS-BY-ID", param);
		
    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product</tt>
	 *
	 *	@param productName
	 *	@param productErpNo
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 
    public  List<String>   queryForProductIdArray(String productName, String productErpNo) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productName", productName);
        param.put("productErpNo", productErpNo);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-QUERY-FOR-PRODUCT-ID-ARRAY", param);

    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product</tt>
	 *
	 *	@return List<ProductDO>
	 *	@throws DataAccessException
	 */	 
    public  List<ProductDO>   queryAllGoods() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-QUERY-ALL-GOODS", null);

    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set PRO_ZJM=? where (PRODUCT_ID = ?)</tt>
	 *
	 *	@param proZjm
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateZjm(String proZjm, String productId) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("proZjm", proZjm);
        param.put("productId", productId);

        return getSqlMapClientTemplate().update("MS-PRODUCT-UPDATE-ZJM", param);
    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_product</tt>
	 *
	 *	@param productId
	 *	@param proType
	 *	@param teamId
	 *	@param teamName
	 *	@param productName
	 *	@param onSale
	 *	@param canBuy
	 *	@param licenseNo
	 *	@param isDelete
	 *	@param erpNo
	 *	@param hasChooseForDiscount
	 *	@param linkProIds
	 *	@param barCode
	 *	@param offset
	 *	@param limit
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 
    public  List<Map<String,Object>>   queryGoodsWithBarCode(String productId, String proType, String teamId, String teamName, String productName, String onSale, String canBuy, String licenseNo, String isDelete, String erpNo, String hasChooseForDiscount, List linkProIds, String barCode, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productId", productId);
        param.put("proType", proType);
        param.put("teamId", teamId);
        param.put("teamName", teamName);
        param.put("productName", productName);
        param.put("onSale", onSale);
        param.put("canBuy", canBuy);
        param.put("licenseNo", licenseNo);
        param.put("isDelete", isDelete);
        param.put("erpNo", erpNo);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProIds", linkProIds);
        param.put("barCode", barCode);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-PRODUCT-QUERY-GOODS-WITH-BAR-CODE", param);

    }

	/**
	 *  Query DB table <tt>hqyt_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from hqyt_product</tt>
	 *
	 *	@param productId
	 *	@param proType
	 *	@param teamId
	 *	@param teamName
	 *	@param productName
	 *	@param onSale
	 *	@param canBuy
	 *	@param licenseNo
	 *	@param isDelete
	 *	@param erpNo
	 *	@param hasChooseForDiscount
	 *	@param linkProIds
	 *	@param barCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryGoodsWithBarCodeCount(String productId, String proType, String teamId, String teamName, String productName, String onSale, String canBuy, String licenseNo, String isDelete, String erpNo, String hasChooseForDiscount, List linkProIds, String barCode) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("productId", productId);
        param.put("proType", proType);
        param.put("teamId", teamId);
        param.put("teamName", teamName);
        param.put("productName", productName);
        param.put("onSale", onSale);
        param.put("canBuy", canBuy);
        param.put("licenseNo", licenseNo);
        param.put("isDelete", isDelete);
        param.put("erpNo", erpNo);
        param.put("hasChooseForDiscount", hasChooseForDiscount);
        param.put("linkProIds", linkProIds);
        param.put("barCode", barCode);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-PRODUCT-QUERY-GOODS-WITH-BAR-CODE-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>hqyt_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_product set DEL_FLG=?, ON_SALE=?, MODIFIER=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ID = ?)</tt>
	 *
	 *	@param product
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   recoverGood(ProductDO product) throws DataAccessException {
    	if (product == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PRODUCT-RECOVER-GOOD", product);
    }

}