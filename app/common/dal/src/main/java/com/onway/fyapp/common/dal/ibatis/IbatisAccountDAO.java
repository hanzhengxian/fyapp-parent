/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.onway.fyapp.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.onway.fyapp.common.dal.daointerface.AccountDAO;

import com.onway.fyapp.common.dal.dataobject.AccountDO;
import org.springframework.dao.DataAccessException;
import com.onway.common.lang.Money;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.onway.fyapp.common.dal.daointerface.AccountDAO</tt>.
 *
 * This file is generated by <tt>onway-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>onway</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/hqyt_account.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>onway-gen-dal</tt> 
 * to generate this file.
 *
 * @author guangdong.li
 * @version $Id: IbatisAccountDAO.java,v 1.0 2013/10/29 07:34:20 guangdong.li Exp $
 */
public class IbatisAccountDAO extends SqlMapClientDaoSupport implements AccountDAO {
	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_account</tt>
	 *
	 *	@param linkId
	 *	@param accountNo
	 *	@param type
	 *	@param delFlg
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public  AccountDO   searchByLinkIdOrAccountNo(String linkId, String accountNo, String type, String delFlg) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("linkId", linkId);
        param.put("accountNo", accountNo);
        param.put("type", type);
        param.put("delFlg", delFlg);

	        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SEARCH-BY-LINK-ID-OR-ACCOUNT-NO", param);
		
    }

	/**
	 *  Insert one <tt>AccountDO</tt> object to DB table <tt>hqyt_account</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into hqyt_account(ACCOUNT_NO,LINK_ID,TYPE,DEVOTE_AMOUNT,HU_BALANCE,HU_POINT,DEL_FLG,GMT_CREATE,GMT_MODIFIED) values (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param account
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   creat(AccountDO account) throws DataAccessException {
    	if (account == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ACCOUNT-CREAT", account);

        return account.getId();
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_account</tt>
	 *
	 *	@param linkId
	 *	@param type
	 *	@param delFlg
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public  AccountDO   queryByLinkId(String linkId, String type, String delFlg) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("linkId", linkId);
        param.put("type", type);
        param.put("delFlg", delFlg);

	        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-QUERY-BY-LINK-ID", param);
		
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select ID, ACCOUNT_NO, LINK_ID, TYPE, DEVOTE_AMOUNT, HU_BALANCE, HU_POINT, RE_POINT, DEL_FLG, GMT_CREATE, GMT_MODIFIED from hqyt_account where (LINK_ID = ?) for update</tt>
	 *
	 *	@param linkId
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public  AccountDO   selectByLinkIdForUpdate(String linkId) throws DataAccessException {

 
	        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SELECT-BY-LINK-ID-FOR-UPDATE", linkId);
		
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select ID, ACCOUNT_NO, LINK_ID, TYPE, DEVOTE_AMOUNT, HU_BALANCE, HU_POINT, RE_POINT, DEL_FLG, GMT_CREATE, GMT_MODIFIED from hqyt_account where (ACCOUNT_NO = ?) for update</tt>
	 *
	 *	@param accountNo
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public  AccountDO   selectByAccNoForUpdate(String accountNo) throws DataAccessException {

 
	        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SELECT-BY-ACC-NO-FOR-UPDATE", accountNo);
		
    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set HU_BALANCE=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param huBalance
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateHuBal(Money huBalance, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("huBalance", huBalance);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-HU-BAL", param);
    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set HU_POINT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param huPoint
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateHuPoint(Money huPoint, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("huPoint", huPoint);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-HU-POINT", param);
    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set RE_POINT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param rePoint
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateHuPointRe(Money rePoint, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("rePoint", rePoint);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-HU-POINT-RE", param);
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select ID, ACCOUNT_NO, LINK_ID, TYPE, DEVOTE_AMOUNT, HU_BALANCE, HU_POINT, RE_POINT, DEL_FLG, GMT_CREATE, GMT_MODIFIED from hqyt_account where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param accountNo
	 *	@return AccountDO
	 *	@throws DataAccessException
	 */	 
    public  AccountDO   selectByAccNo(String accountNo) throws DataAccessException {

 
	        return (AccountDO) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-SELECT-BY-ACC-NO", accountNo);
		
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from hqyt_account</tt>
	 *
	 *	@param huBalance
	 *	@param huPoint
	 *	@param linkId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateAmount(String huBalance, String huPoint, String linkId) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("huBalance", huBalance);
        param.put("huPoint", huPoint);
        param.put("linkId", linkId);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-UPDATE-AMOUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set DEVOTE_AMOUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param devoteAmount
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateDevote(Money devoteAmount, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("devoteAmount", devoteAmount);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-DEVOTE", param);
    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from hqyt_account</tt>
	 *
	 *	@param linkId
	 *	@param type
	 *	@param delFlg
	 *	@param offset
	 *	@param limit
	 *	@return List<AccountDO>
	 *	@throws DataAccessException
	 */	 
    public  List<AccountDO>   queryAllAccount(String linkId, String type, String delFlg, Integer offset, Integer limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("linkId", linkId);
        param.put("type", type);
        param.put("delFlg", delFlg);
        param.put("offset", offset);
        param.put("limit", limit);

        return getSqlMapClientTemplate().queryForList("MS-ACCOUNT-QUERY-ALL-ACCOUNT", param);

    }

	/**
	 *  Query DB table <tt>hqyt_account</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from hqyt_account</tt>
	 *
	 *	@param linkId
	 *	@param type
	 *	@param delFlg
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   queryAllAccountCount(String linkId, String type, String delFlg) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("linkId", linkId);
        param.put("type", type);
        param.put("delFlg", delFlg);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-ACCOUNT-QUERY-ALL-ACCOUNT-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set HU_POINT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param huPoint
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updateHuPointByAccountNo(Money huPoint, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("huPoint", huPoint);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-HU-POINT-BY-ACCOUNT-NO", param);
    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set DEVOTE_AMOUNT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param devoteAmount
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   payOrderSuccForDevote(Money devoteAmount, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("devoteAmount", devoteAmount);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-PAY-ORDER-SUCC-FOR-DEVOTE", param);
    }

	/**
	 *  Update DB table <tt>hqyt_account</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update hqyt_account set HU_POINT=?, GMT_MODIFIED=CURRENT_TIMESTAMP where (ACCOUNT_NO = ?)</tt>
	 *
	 *	@param huPoint
	 *	@param accountNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public  int   updatePoint(Money huPoint, String accountNo) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("huPoint", huPoint);
        param.put("accountNo", accountNo);

        return getSqlMapClientTemplate().update("MS-ACCOUNT-UPDATE-POINT", param);
    }

}